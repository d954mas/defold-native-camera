local CAMERAS = require "main.cameras"
local mouse_spos = vmath.vector3() -- screen pos
local mouse_wpos = vmath.vector3() -- world pos

local zstep = 10
local panning = false
local orbit_cam_speed = 0.3

local cursor = msg.url("main", "/cursor/dot", "script")
local xrot = vmath.quat_rotation_x(math.rad(-30))
local cam_ids
local planeNormal = vmath.vector3(0, 0, 1)
local planePoint = vmath.vector3(0, 0, 0)


function init(self)
	msg.post(".", "acquire_input_focus")
	self.orbitCamAngle = 0

	self.mouse_spos = vmath.vector3()
	cam_ids = { go.get_id("camera1"), go.get_id("camera2"), go.get_id("camera3"), go.get_id("camera4") }
	self.camIndex = 1
	self.mouse_wpos = vmath.vector3()
end

function update(self, dt)
	CAMERAS.cameras[1]:set_position(go.get_world_position(go.get_id("character"))+vmath.vector3(0,0,0))
	CAMERAS.current_camera=CAMERAS.cameras[self.camIndex]
	


	if self.camIndex == 1 then
		-- if using the 2D orthographic camera
		self.mouse_wpos.x, self.mouse_wpos.y = CAMERAS.cameras[1]:screen_to_world_2d(self.mouse_spos.x, self.mouse_spos.y)
	else
		-- if using one of the other cameras
		--		screen_to_world_2d works for a 2D-oriented perspective camera, but
		--		will have some slight imprecision based on the size of the view depth.
		local result, point = CAMERAS.current_camera:screen_to_world_plane(self.mouse_spos.x, self.mouse_spos.y,  planeNormal, planePoint)
		if result then self.mouse_wpos = point end
	end
	msg.post(cursor, "update pos", {pos = self.mouse_wpos})
end

function on_input(self, action_id, action)
	if action_id == nil then
		self.mouse_spos.x = action.screen_x;  self.mouse_spos.y = action.screen_y

	elseif action_id == hash("1") and action.pressed then
		self.camIndex = 1

	elseif action_id == hash("2") and action.pressed then
		self.camIndex = 2

	elseif action_id == hash("escape") then
		msg.post("@system:", "exit", {code = 0})
	end
end

function final(self)
	msg.post(".", "release_input_focus")
end
